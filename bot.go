package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// Random facts –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
var facts = []string{
	"–°–æ–Ω—Ü–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤ 330 000 —Ä–∞–∑—ñ–≤ –≤–∞–∂—á–µ –∑–∞ –ó–µ–º–ª—é.",
	"–ü—ñ–Ω–≥–≤—ñ–Ω–∏ –º–æ–∂—É—Ç—å –ø—ñ—Ä–Ω–∞—Ç–∏ –Ω–∞ –≥–ª–∏–±–∏–Ω—É –ø–æ–Ω–∞–¥ 500 –º–µ—Ç—Ä—ñ–≤.",
	"–ú–µ–¥ –Ω–µ –ø—Å—É—î—Ç—å—Å—è —ñ –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —Ç–∏—Å—è—á—ñ —Ä–æ–∫—ñ–≤.",
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç—É
func getRandomFact() string {
	rand.Seed(time.Now().UnixNano())
	return facts[rand.Intn(len(facts))]
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
func factsHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		fact := getRandomFact()
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"fact": fact})
	} else {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
func startWebServer() {
	http.HandleFunc("/fact", factsHandler)
	log.Println("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ :8080...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func main() {
	// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É
	log.Println("–°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª .env...")
	err := godotenv.Load("C:\\Users\\Lenovo\\Desktop\\GO\\.env") // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—ñ —Å–ª–µ—à—ñ –¥–ª—è —à–ª—è—Ö—É
	if err != nil {
		log.Fatalf("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É .env: %v", err)
	}

	// –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
	botToken := os.Getenv("TELEGRAM_TOKEN")
	log.Printf("–¢–æ–∫–µ–Ω –∑ .env –∞–±–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: '%s'", botToken)
	if botToken == "" {
		log.Fatal("–¢–æ–∫–µ–Ω Telegram –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env –∞–±–æ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –∑–º—ñ–Ω–Ω–æ—ó.")
	}

	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram API: %v", err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ %s", bot.Self.UserName)

	// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º—ñ–π –≥–æ—Ä—É—Ç–∏–Ω—ñ
	go startWebServer()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil { // –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		if update.Message.Text == "/fact" {
			// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç—É –∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
			resp, err := http.Get("http://localhost:8080/fact")
			if err != nil {
				log.Println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–∫—Ç—É:", err)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–∫—Ç üò¢"))
				continue
			}
			defer resp.Body.Close()

			body, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				log.Println("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", err)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üò¢"))
				continue
			}

			var result map[string]string
			err = json.Unmarshal(body, &result)
			if err != nil {
				log.Println("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON:", err)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üò¢"))
				continue
			}

			fact := result["fact"]
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, fact)
			bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /fact, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç!")
			bot.Send(msg)
		}
	}
}
